// Number traits
/// 1, 2, 3, 4, 5, ...
natural_number = @{ '1'..'9' ~ ASCII_DIGIT* }
/// 0, 1, 2, 3, 4, 5, ...
whole_number = { ASCII_DIGIT+ }
/// ..., -3, -2, -1, 0, 1, 2, 3, ...
integer_number = @{ ("-" ~ natural_number) | whole_number }

// Types
type_name = { (ASCII_ALPHA_UPPER ~ ASCII_ALPHANUMERIC*) | ("_" ~ ASCII_ALPHA_UPPER ~ ASCII_ALPHANUMERIC*) }
ident_name = { (ASCII_ALPHA_LOWER ~ ASCII_ALPHANUMERIC*) | ("_" ~ ASCII_ALPHA_LOWER ~ ASCII_ALPHANUMERIC*) }

// Discrete number types
/// i8 / i16 / i32 / i3
discrete_signed_ty = @{ "i" ~ natural_number }
/// i<N>
discrete_signed_expl_ty = { "i" ~ "<" ~ natural_number ~ ">" }
/// u8 / u16 / u32 / u11
discrete_unsigned_ty = @{ "u" ~ natural_number }
/// u<N>
discrete_unsigned_expl_ty = { "u" ~ "<" ~ natural_number ~ ">" }
discrete_any_ty = { discrete_signed_ty | discrete_signed_expl_ty | discrete_unsigned_ty | discrete_unsigned_expl_ty }

// Fixed point number types
/// Signed: q3.12
fixed_signed_ty = @{ "q" ~ whole_number ~ "." ~ whole_number }
/// Full syntax signed: q<m, n>
fixed_signed_expl_ty = { "q" ~ "<" ~ expression ~ "," ~ expression ~ ">" }
/// Unsigned: uq1.15
fixed_unsigned_ty = @{ "uq" ~ whole_number ~ "." ~ whole_number }
/// Full syntax unsigned: uq<m, n>
fixed_unsigned_expl_ty = { "uq" ~ "<" ~ expression ~ "," ~ expression ~ ">" }
/// Implicitly scaled: q12<u8> 0..=255 * 2^-12
fixed_impl_scaled_ty = @ { "q" ~ natural_number ~ "<" ~ discrete_any_ty ~ ">" }
fixed_any_ty = { fixed_signed_ty | fixed_signed_expl_ty | fixed_unsigned_ty | fixed_unsigned_expl_ty | fixed_impl_scaled_ty }

/// Floating point number types
floating_any_ty = { "f32" | "f64" }

/// Textual types
textual_any_ty = { "char" | "str" }

// Sequence types
/// Unit: ()
unit_ty = { "(" ~ ")" }
/// Tuple: (t1, t2, ...)
tuple_ty = { unit_ty | "(" ~ (any_ty ~ ",")+ ~ any_ty? ~ ")" }
/// Array
array_ty = { "[" ~ any_ty ~ ";" ~ expression }

/// All the types
any_ty = { discrete_any_ty | fixed_any_ty | floating_any_ty | textual_any_ty | tuple_ty | array_ty | type_name }

// Definitions
/// Alias type
type_alias_def = { "type" ~ type_name ~ "=" ~ any_ty ~ ";" }
/// Struct type
struct_inner_def = { "{" ~ (ident_name ~ ":" ~ any_ty)+ ~ "}" }
struct_def = { doc_comment{0,} ~ shebang{0,} ~ "struct" ~ type_name ~ struct_inner_def }

// Statements
let_stmt = { "let" ~ ident_name ~ "=" ~ expression }
item_stmt = { "TODO" }
api_stmt = { "TODO" }
expr_stmt = { expression ~ ";" | expression_block ~ ";"? }

statement = { let_stmt | item_stmt | api_stmt }

// Literals
bool_lit = { "true" | "false" }
sign_prefix = { "+" | "-" }
/// -10, 17, 0, +3, 127u16, 1_000, 1023_u32
dec_lit = { sign_prefix? ~ (ASCII_DIGIT | "_")+ ~ discrete_any_ty? }
/// 0xAA, 0xcc, 0xff_u8
hex_lit = { "0x" ~ (ASCII_HEX_DIGIT | "_")+ ~ discrete_any_ty? }
/// 0b1111_0000, 0b101_u3
bin_lit = { "0b" ~ (ASCII_BIN_DIGIT | "_")+ ~ discrete_any_ty? }
/// 0o7
oct_lit = { "0o" ~ (ASCII_OCT_DIGIT | "_")+ ~ discrete_any_ty? }
/// Any discrete literal followed by optional type
discrete_lit = { dec_lit | hex_lit | bin_lit | oct_lit }

// Operators
unary_op = {
    "-" | // Negation
    "!"   // Bitwise NOT or Boolean NOT
}
binary_op = {
    "+" | // Addition
    "-" | // Subtraction
    "*" | // Multiplication
    "/" | // Division
    "%" | // Remainder
    "&" | // Bitwise AND or Boolean AND
    "|" | // Bitwise OR or Boolean OR
    "^" | // Bitwise XOR or Boolean XOR
    "<<" | // Left shift
    ">>"   // Right shift
}

// Expressions
literal_expr = { bool_lit | discrete_lit }

unary_expr = { unary_op ~ expression }
infix_expr = { expression_inner ~ (binary_op ~ expression_inner)+ }

expression_inner = { unary_expr | literal_expr }
expression = {  infix_expr | expression_inner }

block_open = { "(" | "{" | "[" }
block_close = { ")" | "}" | "]" }
expression_block = { block_open ~ expression ~ block_close }

// Shebang
shebang = @{ "#[" ~ (!"]" ~ ANY)* ~ "]" ~ NEWLINE }

//
doc_comment = { "///" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
single_line_comment = { !"///" ~ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
multi_line_comment = { "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
COMMENT = { single_line_comment | multi_line_comment }
WHITESPACE = _{ (" " | "\t" | "\r" | "\n")+ }
