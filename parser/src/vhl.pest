file = { SOI ~ shebang? ~ item* ~ EOI }
item = { definition }

// Number traits
/// 1, 2, 3, 4, 5, ...
natural_number = @{ '1'..'9' ~ ASCII_DIGIT* }
/// 0, 1, 2, 3, 4, 5, ...
whole_number = @{ ASCII_DIGIT+ }
/// ..., -3, -2, -1, 0, 1, 2, 3, ...
integer_number = @{ ("-" ~ natural_number) | whole_number }

// Types
capitalized_word = @{ ASCII_ALPHA_UPPER ~ ASCII_ALPHANUMERIC* }
lowercase_word = @{ ASCII_ALPHA_LOWER ~ ASCII_ALPHANUMERIC* }
type_name = @{ capitalized_word }
ident_name = @{ lowercase_word }
simple_path_segment = @{ (ASCII_ALPHA_LOWER | "_")+ }

// Discrete number types
/// i8 / i16 / i32 / i3 / i{expr}
discrete_signed_ty = @{ "i" ~ natural_number | "i" ~ expression_braced }
/// u8 / u16 / u32 / u11 / u{expr}
discrete_unsigned_ty = @{ "u" ~ natural_number | "u" ~ expression_braced }
discrete_any_ty = { discrete_signed_ty | discrete_unsigned_ty }

// Fixed point number types
/// Signed: q3.12 / q{ expr -> (m, n) } / q{ expr -> (m, discrete_any_ty) }
fixed_signed_ty = @{ "q" ~ whole_number ~ "." ~ whole_number | "q" ~ expression_braced }
/// Unsigned: uq1.15 / uq{ expr -> (m, n) }
fixed_unsigned_ty = @{ "uq" ~ whole_number ~ "." ~ whole_number | "uq" ~ expression_braced }
fixed_any_ty = { fixed_signed_ty | fixed_unsigned_ty }

/// Floating point number types
floating_any_ty = { "f32" | "f64" }

/// Textual types
textual_any_ty = { "char" | "str" }

// Sequence types
/// Unit: ()
unit_ty = { "(" ~ ")" }
/// Tuple: (t1, t2, ...)
tuple_ty = { unit_ty | "(" ~ (any_ty ~ ",")+ ~ any_ty? ~ ")" }
/// Array
array_ty = { "[" ~ any_ty ~ ";" ~ expression }

/// All the types
any_ty = { discrete_any_ty | fixed_any_ty | floating_any_ty | textual_any_ty | tuple_ty | array_ty | type_name }

// Definitions
/// Alias type
type_alias_def = { "type" ~ type_name ~ "=" ~ any_ty ~ ";" }
/// Struct type
struct_inner_def = { "{" ~ (ident_name ~ ":" ~ any_ty)+ ~ "}" }
struct_def = { doc_comment{0,} ~ shebang{0,} ~ "struct" ~ type_name ~ struct_inner_def }

definition = { struct_def | type_alias_def }

// Statements
let_stmt = { "let" ~ ident_name ~ "=" ~ expression }
item_stmt = { "TODO" }
api_stmt = { "TODO" }
expr_stmt = { expression ~ ";" | expression_braced ~ ";"? }

statement = { let_stmt | item_stmt | api_stmt }

// Literals
bool_lit = { "true" | "false" }
sign_prefix = { "+" | "-" }
/// -10, 17, 0, +3, 127u16, 1_000, 1023_u32
dec_lit = @{ sign_prefix? ~ (ASCII_DIGIT | "_")+ ~ discrete_any_ty? }
/// 0xAA, 0xcc, 0xff_u8
hex_lit = @{ "0x" ~ (ASCII_HEX_DIGIT | "_")+ ~ discrete_any_ty? }
/// 0b1111_0000, 0b101_u3
bin_lit = @{ "0b" ~ (ASCII_BIN_DIGIT | "_")+ ~ discrete_any_ty? }
/// 0o7
oct_lit = @{ "0o" ~ (ASCII_OCT_DIGIT | "_")+ ~ discrete_any_ty? }
/// Any discrete literal followed by optional type
discrete_lit = { dec_lit | hex_lit | bin_lit | oct_lit }

// Operators
unary_op = {
    "-" | // Negation
    "!"   // Bitwise NOT or Boolean NOT
}
binary_op = {
    "+" | // Addition
    "-" | // Subtraction
    "*" | // Multiplication
    "/" | // Division
    "%" | // Remainder
    "&" | // Bitwise AND or Boolean AND
    "|" | // Bitwise OR or Boolean OR
    "^" | // Bitwise XOR or Boolean XOR
    "<<" | // Left shift
    ">>"   // Right shift
}

// Expressions
literal_expr = { bool_lit | discrete_lit }

unary_expr = { unary_op ~ expression }
infix_expr = { expression_inner ~ (binary_op ~ expression_inner)+ }

expression_inner = { unary_expr | literal_expr }
expression = { infix_expr | expression_inner }

block_open = { "(" | "{" | "[" }
block_close = { ")" | "}" | "]" }
// expression_block = { block_open ~ expression ~ block_close }
expression_braced = { "{" ~ expression ~ "}" }

// Attributes
inner_attribute = { "#![" ~ attribute ~ "]" }
outer_attribute = { "#[" ~ attribute ~ "]" }
attribute = { simple_path ~ attribute_input }
simple_path = { "::"? ~ simple_path_segment ~ ("::" ~ simple_path_segment)* }
attribute_input = { delim_token_tree | "=" ~ expression }

// Keywords
kw_fn = { "fn" }
kw_let = { "let" }
kw_struct = { "struct" }
kw_type = { "type" }
kw_use = { "use" }
keyword = { kw_fn | kw_let | kw_struct | kw_type | kw_use }

// Punctuation
punct_plus = { "+" }
punct_minus = { "-" }
punct_star = { "*" }
punct_slash = { "/" }
punct_caret = { "^" }
punct_not = { "!" }
punctuation = { punct_plus | punct_minus | punct_star | punct_slash | punct_caret | punct_not }

// Delimiters
delimiter = { "{" | "}" | "[" | "]" | "(" | ")" }

// Tokens
token_tree = { token_except_delimiters | delim_token_tree }
delim_token_tree = { "(" ~ token_tree* ~ ")" | "[" ~ token_tree* ~ "]" | "{" ~ token_tree* ~ "}" }
token_except_delimiters = { keyword | ident_name | literal_expr | punctuation }
token = { token_except_delimiters | delimiter }

//
doc_comment = { "///" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
single_line_comment = { !"///" ~ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
multi_line_comment = { "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
COMMENT = { single_line_comment | multi_line_comment }
WHITESPACE = _{ (" " | "\t" | "\r" | "\n")+ }
