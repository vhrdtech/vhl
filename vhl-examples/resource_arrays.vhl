rs main {
	/// Three resources will be created at compile time with names 'acceleration_x', 'acceleration_y' and 'acceleration_z'
	rs acceleration_`'x'..'z'`<u8, #0> {}

	/// Three resources will be created at compile time with names 'a_ctrl', 'b_ctrl' and 'c_ctrl'
	rs `'a'..'c'`_ctrl<u8, #1> {}

	/// 9 resources will be created at compile time with names 'register0_b', 'register1_b' .. 'register8_b'
	rs register`0..9`0<u8, #2> {}

	/// Array of 4 u8 values
	rs values<rw [u8; 4], #3> {}

	/// Array with a size >=4 and <12 of u8 values. Nodes can request actual size at run time.
	rs values_variable_size<rw [u8; 4..12], #4> {}

	/// Array with a dynamic size
	rs values_unbound<rw [u8; ?], #5> {}

	/// Group of resources with run time indexing is created.
	/// User code will contain only one handler for each resource and will receive an index being accessed.
	rs channels<rs_array<4>, #6> {
		// 4 instances exist, can be accessed as /channels[0]/value, /channels[1]/value, ...
		rs value<u8, #0> {}
		rs config<u8, #1> {}
	}

	/// Group of resources with run time indexing with dynamic, but bound size
	rs channels_bound<[Self; max 12], #7> {}

	/// Group of resources with run time unbound size
	rs channels_unbound<[Self; ?], #8> {}

	// Non numerical and multi-dimensional indexes are supported by grammar, but currently not parsed
	// rs channels_matrix<[Self; 3..10, 3..10], #9> {}
	// rs char_matrix<[Self; 'a'..'c', 'x'..'z'], #10> {}

	/// Cell guarded group, usefull if several resources are logically connected and it makes sense to borrow them all at once
	rs streams<Cell<Self>, #11> {
		rs in_a<wo+stream u8, #0> {}
		rs in_b<wo+stream u8, #1> {}
		rs control<fn(x: u8, y: u8), #2> {}
	}

	/// Array of Cell gorups is also allowed. Different nodes can borrow one ore more Cell's out of an array and gain mutable access.
	/// Need to be rw or allow borrowing from ro array?
	rs uart<[Cell<Self>; 4], #12> { // rs_cell_array<4>
		// Borrow one out of 4 UART channels and use it's input streams for writing data as raw bytes, chunks or Frame's.

		rs uart_in<wo+stream u8, #0> {}
		rs uart_in_block<wo+stream [u8; 128], #1> {}
		rs uart_in_frame<wo+stream Frame, #2> {}

		rs uart_out<ro+stream u8, #3> {}
	}

	rs array_of_cells<[Cell<u8>; 4], #13> {} // assuming resource inside the Cell is rw
	// rs array_of_wo_cells<rw [Cell<wo u8>; 4], #14> // won't work with wo though
}